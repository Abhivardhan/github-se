{"version":3,"sources":["components/Search.js","components/UserCard.js","components/RepoCard.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","username","handleInput","event","setState","target","value","fetchData","this","props","className","style","margin","textAlign","type","name","placeholder","onChange","onClick","React","Component","UserCard","user","src","avatar_url","float","company","bio","RepoCard","repo","href","html_url","full_name","description","App","repos","pageIndex","userDataError","reposError","error","loader","fetchingRepos","fetchUserData","a","fetch","res","ok","json","data","message","fetchUserRepos","console","log","Promise","all","loadMore","login","loadPage","handleScroll","currentScroll","window","scrollY","maxScroll","scrollMaxY","document","documentElement","scrollHeight","clientHeight","public_repos","addEventListener","removeEventListener","length","map","key","id","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9feebd3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/Search.css';\r\n\r\nexport default class Search extends React.Component {\r\n\r\n    state = {\r\n        username: \"\"\r\n    }\r\n\r\n    handleInput = event => {\r\n        this.setState({\r\n            username: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { fetchData } = this.props; \r\n        const { username } = this.state; \r\n\r\n        return (\r\n            <div className=\"jumbotron\" style={{margin: \"50px 100px\"}}>\r\n                <h1 style={{textAlign: \"center\"}}> Search for User Repos in github</h1>\r\n                <input value={this.state.username} type=\"text\" name=\"username\" className=\"form-control search-input\" placeholder=\"Search Username\" onChange={this.handleInput}/>\r\n                <div>\r\n                    <button onClick = {() => fetchData(username)} className=\"btn btn-large btn-success search-btn\">Search</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport './css/Card.css'\r\n\r\nexport default function UserCard({user}) {\r\n\r\n    return (\r\n        <div className=\"card\" style={{margin: \"50px 100px\"}}>\r\n            <div className=\"card-body\">\r\n                <img src={user.avatar_url} />\r\n                <div style={{float: \"left\", margin: \"0\"}}>\r\n                <h1>{user.name}</h1>\r\n                <p>{user.company}</p>\r\n                <p>{user.bio}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\n\r\nexport default function RepoCard({ repo }) {\r\n    return(\r\n        <div className=\"card\" style={{margin: \"50px 100px\"}}>\r\n            <div className=\"card-body\">\r\n                <a href={repo.html_url} target=\"_blank\">\r\n                    <h3>{repo.full_name}</h3>\r\n                </a>\r\n                <p><strong>Description: </strong>{repo.description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport Search from './components/Search';\nimport UserCard from './components/UserCard';\nimport RepoCard from './components/RepoCard';\nimport './App.css';\n\nconst PAGE_SIZE = 10;\n\nclass App extends React.Component {\n\n    state = {\n        user: null,\n        repos: [],\n        pageIndex: 1,\n        userDataError: null,\n        reposError: null,\n        error: null,\n        loader: false,\n        fetchingRepos: false\n    };\n\n    fetchUserData = async (username) => {\n        let res = await fetch(`https://api.github.com/users/${username}`);\n    \n        if(res.ok) {\n        let data = await res.json();\n\n        return {data};\n        }\n\n        const error = (await res.json()).message;\n\n        return {error};\n\n    }\n\n    fetchUserRepos = async (username) => {\n\n        let pageIndex = this.state.pageIndex;\n\n        let res = await fetch(`https://api.github.com/users/${username}/repos?page=${pageIndex}&per_page=${PAGE_SIZE}`);\n    \n        console.log(res);\n        if(res.ok) {\n            let data = await res.json();\n            console.log(data);\n\n            return {data, pageIndex: pageIndex + 1};\n        }\n\n        const error = (await res.json()).message;\n\n        return {error};\n    }\n\n    fetchData = async (username) => {\n        this.setState({\n            user: null,\n            repos: [],\n            pageIndex: 1,\n            userDataError: null,\n            reposError: null,\n            error: null,\n            loader: true,\n            fetchingRepos: false\n        }, async () => {\n        try {\n            let [user, repos] = await Promise.all([this.fetchUserData(username), this.fetchUserRepos(username)]);\n\n            if(user.data && repos.data) {\n                return this.setState({\n                    user: user.data,\n                    repos: repos.data,\n                    pageIndex: 2,\n                    loader: false\n                });\n            }\n\n            this.setState({\n                userDataError: user.error,\n                reposError: repos.error,\n                loader: false\n            });\n\n        } catch(err) {\n            console.log(err);\n            this.setState({\n            error: \"There was some error\",\n            loader: true\n            });\n        }\n        });\n    }\n\n    loadMore = async () => {\n        let { repos } = this.state;\n        let {data, pageIndex} = await this.fetchUserRepos(this.state.user.login);\n\n        if(data) {\n            this.setState(state => ({\n                repos: [...state.repos, ...data],\n                pageIndex\n            }));\n        }\n        \n    }\n\n    loadPage = async () => {\n        if(this.state.fetchingRepos) return;\n\n        this.setState({ fetchingRepos: true}, async () => {\n            let {data} = await this.fetchUserRepos(\n                this.state.user.login\n            );\n        \n            if(data) {\n                this.setState(state => ({\n                    repos: [...state.repos, ...data],\n                    pageIndex: state.pageIndex + 1,\n                    fetchingRepos: false\n                }));\n            }\n        });\n    }\n\n    componentDidMount() {\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll);   \n    }\n\n    handleScroll = () => {\n        let currentScroll = window.scrollY;\n        let maxScroll = window.scrollMaxY || document.documentElement.scrollHeight - document.documentElement.clientHeight;\n        let {pageIndex, user} = this.state;\n\n\n        if(user && ((pageIndex -1) * PAGE_SIZE <= user.public_repos) && (maxScroll - currentScroll <= 100)) {\n            this.loadPage();\n        }\n\n    }\n\n    render() {\n        let { loader, user, repos, pageIndex, userDataError, reposError, error} = this.state;\n        \n        if(error) {\n            console.log(error)\n        }\n\n        return (\n        <div>\n            <div className=\"container\">\n                \n                <Search fetchData={this.fetchData}/>\n                \n                {loader && <h4 style={{textAlign: \"center\"}}>Loading....</h4>}\n                {userDataError && <h4 className=\"text-danger\" style={{textAlign: \"center\"}}>{userDataError}</h4>}\n                {!userDataError &&  user && <UserCard user={user}/> }\n                {reposError && <h4 className=\"text-danger\" style={{textAlign: \"center\"}}>{reposError}</h4>}\n                {!reposError &&  repos.length > 0 && <h3 style={{textAlign: \"center\"}}>User Repositories</h3>}\n                {!reposError &&  repos && repos.map((repo) => <RepoCard key={repo.id} repo={repo}/> )}\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}